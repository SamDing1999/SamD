package fracCalc;
import java.util.*;
import org.junit.Test;

// Checkpoint 3-only tests
public class FracCalcTestCheckpoint3
{
    @Test public void testCheckpoint3_AdditionSimple3() {FracCalcTestALL.assertForEarlyCheckpoints(null, null, "4_3/7", FracCalc.produceAnswer("1_1/7 + 3_2/7"));}
    @Test public void testCheckpoint3_AdditionWholeNumbers2() {FracCalcTestALL.assertForEarlyCheckpoints(null, null, "1", FracCalc.produceAnswer("2/3 + 1/3"));}
    @Test public void testCheckpoint3_AdditionWholeNumbers7() {FracCalcTestALL.assertForEarlyCheckpoints(null, null, "1021778", FracCalc.produceAnswer("124543 + 897235"));}
    @Test public void testCheckpoint3_AdditionWithNegatives4() {FracCalcTestALL.assertForEarlyCheckpoints(null, null, "-1_1/4", FracCalc.produceAnswer("-3_3/4 + 2_2/4"));}
    @Test public void testCheckpoint3_AdditionImproperFractionsAndReductions2() {FracCalcTestALL.assertForEarlyCheckpoints(null, null, "1_1/20", FracCalc.produceAnswer("4/5 + 2/8"));}
    @Test public void testCheckpoint3_AdditionCombined4() { FracCalcTestALL.assertForEarlyCheckpoints(null, null, "62_11/19", FracCalc.produceAnswer("0 + 34_543/19"));}
    @Test public void testCheckpoint3_SubtractionSimple3() {FracCalcTestALL.assertForEarlyCheckpoints(null, null, "0", FracCalc.produceAnswer("4_1/2 - 4_1/2"));}
    @Test public void testCheckpoint3_SubtractionWithNegatives3() {FracCalcTestALL.assertForEarlyCheckpoints(null, null, "-1_1/4", FracCalc.produceAnswer("-3_3/4 - -2_2/4"));}
    @Test public void testCheckpoint3_SubtractionCombined2() {FracCalcTestALL.assertForEarlyCheckpoints(null, null, "8_5/21", FracCalc.produceAnswer("-12_3/7 - -20_2/3"));}
    @Test public void testCheckpoint3_MultiplicationBasic1() {  FracCalcTestALL.assertForEarlyCheckpoints(null, null, "3", FracCalc.produceAnswer("1_1/2 * 2"));}
    @Test public void testCheckpoint3_MultiplicationBasic10() {FracCalcTestALL.assertForEarlyCheckpoints(null, null, "378/943", FracCalc.produceAnswer("27/41 * 14/23"));}
    @Test public void testCheckpoint3_MultiplicationBasic3() {FracCalcTestALL.assertForEarlyCheckpoints(null, null, "164268", FracCalc.produceAnswer("234 * 702"));}
    @Test public void testCheckpoint3_MultiplicationWithNegatives2() {FracCalcTestALL.assertForEarlyCheckpoints(null, null, "-8", FracCalc.produceAnswer("-12/3 * 2/1"));}
    @Test public void testCheckpoint3_MultiplicationWithNegatives6() {FracCalcTestALL.assertForEarlyCheckpoints(null, null, "15_5/7", FracCalc.produceAnswer("-3_2/3 * -4_2/7"));}
    @Test public void testCheckpoint3_MultiplicationByZero2() {FracCalcTestALL.assertForEarlyCheckpoints(null, null, "0", FracCalc.produceAnswer("0 * 0"));}
    @Test public void testCheckpoint3_MultiplicationByZero3() {FracCalcTestALL.assertForEarlyCheckpoints(null, null, "0", FracCalc.produceAnswer("0 * 9321"));}
    @Test public void testCheckpoint3_MultiplicationByZero4() {FracCalcTestALL.assertForEarlyCheckpoints(null, null, "0", FracCalc.produceAnswer("0 * -5902"));}
    @Test public void testCheckpoint3_MultiplicationCombined1() {   FracCalcTestALL.assertForEarlyCheckpoints(null, null, "1065_115/168", FracCalc.produceAnswer("-32_75/16 * -27_43/21"));}
    @Test public void testCheckpoint3_MultiplicationCombined2() {FracCalcTestALL.assertForEarlyCheckpoints(null, null, "-15_67/943", FracCalc.produceAnswer("1_27/41 * -3_140/23"));}
    @Test public void testCheckpoint3_DivisionBasic1() {FracCalcTestALL.assertForEarlyCheckpoints(null, null, "9/16", FracCalc.produceAnswer("3/4 / 4/3"));}
    @Test public void testCheckpoint3_DivisionBasic2() {FracCalcTestALL.assertForEarlyCheckpoints(null, null, "2_1/4", FracCalc.produceAnswer("3/2 / 2/3"));}
    @Test public void testCheckpoint3_DivisionWithNegatives5() {FracCalcTestALL.assertForEarlyCheckpoints(null, null, "-2_6/7", FracCalc.produceAnswer("-20 / 7"));}
    @Test public void testCheckpoint3_DivisionWithNegatives6() {FracCalcTestALL.assertForEarlyCheckpoints(null, null, "1_13/32", FracCalc.produceAnswer("-3_3/4 / -2_2/3"));}
    @Test public void testCheckpoint3_DivisionWithZero5() { FracCalcTestALL.assertForEarlyCheckpoints(null, null, "0", FracCalc.produceAnswer("0 / 46/27"));}
    @Test public void testCheckpoint3_DivisionWithZero6() {FracCalcTestALL.assertForEarlyCheckpoints(null, null, "0", FracCalc.produceAnswer("0/24 / 1/46"));}
    @Test public void testCheckpoint3_DivisionCombined2() {FracCalcTestALL.assertForEarlyCheckpoints(null, null, "-2_2/3", FracCalc.produceAnswer("16/4 / -3/2"));}
    @Test public void testCheckpoint3_DivisionCombined3() {FracCalcTestALL.assertForEarlyCheckpoints(null, null, "6_661/5520", FracCalc.produceAnswer("-38_3/72 / -4_82/37"));}

  
    	private static final String firstNumerator = null;
    	private static final String firstDenominator = null;
    	private static final String improperFraction2 = null;
    	public static void main(String[] args){
    	   	System.out.println("Please insert your equation");
    	   	Scanner input=new Scanner(System.in);//scanner, which accepts userInput
    	   	String userInput=input.nextLine(); 
    	   	while(userInput.equals("quit")!=true){ //to check if user types "quit"
    	   		String answer = produceAnswer(userInput);
    	   		System.out.println(answer);
    	   		System.out.println("You can continue");
    	   		userInput=input.nextLine();
    	   	}
    	   	System.out.println("Bye");
    	   }
    	   public static String produceAnswer(String input)
    	   {
    	       String[] split = input.split(" "); //split the input into first operand, operator, and second operand
    	       String improperFraction1 = "";
    	       String improperFraction2 ="";
    	       String answer = "";
    	       int [] splitFraction1 = new int [2];
    	       int [] splitFraction2 = new int [2];
    	       int[] operand1 = parsingFraction(split[0]); //split the first operand into 3 parts, :whole, numerator, and denominator
    	       int[] operand2 = parsingFraction(split[2]);
    	       if (split[0].indexOf("_") >= 0 && operand1[0] >= 0){
    	        improperFraction1 = Calculate.toImproperFrac(operand1[0], operand1[1], operand1[2]);
    	        String [] num = improperFraction1.split("/");
    	        for(int i = 0; i < 2; i++){
    	       		splitFraction1[i]= Integer.parseInt(num[i]);
    	       }
    	       }else if(split[0].indexOf("_") >= 0 && operand1[0] < 0){
    	    	   improperFraction1 = Calculate.toImproperFrac(operand1[0], -operand1[1], operand1[2]);
    	    	   String [] num = improperFraction1.split("/");
    	    	   for(int i = 0; i< 2; i++){
    	    		   splitFraction1[i]= Integer.parseInt(num[i]);
    	    		   System.out.println(splitFraction1[0] + "/" + splitFraction1[1]);
    	    	   }
    	       }else if(split[0].indexOf("/") >= 0){ 
    	    	   String [] num = split[0].split("/");
    	           for(int i = 0; i < 2; i++){
    	          		splitFraction1[i]= Integer.parseInt(num[i]);
    	           }
    	           }else{ 
    	        	   splitFraction1[0] = operand1[0];
    	        	   splitFraction1[1] = 1;
    	       }       
    	       if (split[2].indexOf("_") >= 0 && operand2[0] >= 0){
    	       improperFraction2 = Calculate.toImproperFrac(operand2[0], operand2[1], operand2[2]);
    	       String [] num1 = improperFraction2.split("/");
    	       for(int i = 0; i < 2; i++){
    	      		splitFraction2[i]= Integer.parseInt(num1[i]);
    	      }
    	       }else if(split[2].indexOf("_") >= 0 && operand2[0] < 0){
    	    	  improperFraction2 = Calculate.toImproperFrac(operand2[0], -operand2[1], operand2[2]);
    	   	   String [] num1 = improperFraction2.split("/");
    	   	   for(int i = 0; i< 2; i++){
    	   		   splitFraction2[i]= Integer.parseInt(num1[i]);
    	   		   System.out.println(splitFraction2[0] + "/" + splitFraction2[1]);
    	      }
    	      }else if(split[2].indexOf("/") >= 1){ 
    	   	   String [] num1 = split[2].split("/");
    	          for(int i = 0; i < 2; i++){
    	         		splitFraction2[i]= Integer.parseInt(num1[i]);
    	          }
    	          }else{ 
    	       	   splitFraction2[0] = operand2[0];
    	       	   splitFraction2[1] = 1;
    	          }      
    	       String operator = split[1].toString(); //Select the correct method by checking the operator
    	       if (operator.equals("+") == true){
    	    	   answer = add(splitFraction1, splitFraction2);
    	       }else if(operator.equals("-") == true){
    	    	   answer = subtract(splitFraction1, splitFraction2);  
    	       }else if(operator.equals("*") == true){
    	    	   answer = multiplication(splitFraction1, splitFraction2);
    	       }else if(operator.equals("/") == true){
    	    	   answer = division(splitFraction1, splitFraction2);
    	       }
    	       return answer;
    	   }
    	   public static int[] parsingFraction(String operand){
    	   	String [] part= new String[3];
    	   	if(operand.indexOf("_") == -1 && operand.indexOf("/") == -1){ //this is for whole number
    	   		part[0]=operand; 
    	   		part[1]="0";
    	   		part[2]="1";
    	   	} else if(operand.indexOf("_")>=1){ //this is for mixed fraction
    	   			part[0]= operand.substring(0, operand.indexOf("_"));
    	   			operand = operand.substring (operand.indexOf("_")+1);
    	   		} else { //for rest of the fractions
    	   			part[0]="0";
    	   		}
    	   		if (operand.indexOf("/")>=1){ //split the fraction
    	   			part[1]= operand.substring(0, operand.indexOf("/"));
    	   			part[2]= operand.substring( operand.indexOf("/")+1);
    	   		}
    	   	int[] number=new int [3]; //Converting String into int
    	   	for(int i = 0; i < 3; i++){
    	   		number [i]= Integer.parseInt(part[i]);
    	   	} 
    	   	return number;	
    	   }
    	public static String add(int [] splitFraction1, int [] splitFraction2){ //This method can help you to find the sum of fractions
    		int firstNumerator = splitFraction1[0];
    		int firstDenominator = splitFraction1[1];
    		System.out.println(firstNumerator + "/" + firstDenominator);
    		int secondNumerator = splitFraction2[0];
    		int secondDenominator = splitFraction2[1];
    		System.out.println(secondNumerator + "/" + secondDenominator);
    		int gcf= firstDenominator * secondDenominator;
    		System.out.println(gcf);
    		int sumNumerator = ((gcf/firstDenominator) * firstNumerator) + ((gcf/secondDenominator) * secondNumerator);
    		String answer = sumNumerator + "/" + gcf;
    		return answer;
    	}
    	public static String subtract(int [] splitFraction1, int [] splitFraction2){ //This method can help you to find the difference of fractions
    		int firstNumerator = splitFraction1[0];
    		int firstDenominator = splitFraction1[1];
    		System.out.println(firstNumerator + "/" + firstDenominator);
    		int secondNumerator = splitFraction2[0];
    		int secondDenominator = splitFraction2[1];
    		System.out.println(secondNumerator + "/" + secondDenominator);
    		int gcf= firstDenominator * secondDenominator;
    		int diffNumerator = ((gcf/firstDenominator) * firstNumerator) - ((gcf/secondDenominator) * secondNumerator);
    		String answer = diffNumerator + "/" + gcf;
    		return answer;
    	}
    	public static String multiplication (int [] splitFraction1 , int [] splitFraction2){ //This method helps you to find out the product of two fractions
    		int firstNumerator = splitFraction1[0];
    		int firstDenominator = splitFraction1[1];
    		System.out.println(firstNumerator + "/" + firstDenominator);
    		int secondNumerator = splitFraction2[0];
    		int secondDenominator = splitFraction2[1];
    		System.out.println(secondNumerator + "/" + secondDenominator);
    		String answer = (firstNumerator * secondNumerator) + "/" + (firstDenominator * secondDenominator);
    		return answer;
    	}
    	public static String division (int [] splitFraction1, int [] splitFraction2){ //This method helps you to find out the division of two fractions
    		int firstNumerator = splitFraction1[0];
    		int firstDenominator = splitFraction1[1];
    		System.out.println(firstNumerator + "/" + firstDenominator);
    		int secondNumerator = splitFraction2[1];
    		int secondDenominator = splitFraction2[0];
    		System.out.println(secondNumerator + "/" + secondDenominator);
    		String answer = (firstNumerator * secondNumerator) + "/" + (firstDenominator * secondDenominator);
    		return answer;
    	}
    	}

