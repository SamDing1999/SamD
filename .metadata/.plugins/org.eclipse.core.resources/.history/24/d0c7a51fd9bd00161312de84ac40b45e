package fracCalc;
import java.util.*;
import org.junit.Test;

// Checkpoint 3-only tests
public class FracCalcTestCheckpoint3
{
    @Test public void testCheckpoint3_AdditionSimple3() {FracCalcTestALL.assertForEarlyCheckpoints(null, null, "4_3/7", FracCalc.produceAnswer("1_1/7 + 3_2/7"));}
    @Test public void testCheckpoint3_AdditionWholeNumbers2() {FracCalcTestALL.assertForEarlyCheckpoints(null, null, "1", FracCalc.produceAnswer("2/3 + 1/3"));}
    @Test public void testCheckpoint3_AdditionWholeNumbers7() {FracCalcTestALL.assertForEarlyCheckpoints(null, null, "1021778", FracCalc.produceAnswer("124543 + 897235"));}
    @Test public void testCheckpoint3_AdditionWithNegatives4() {FracCalcTestALL.assertForEarlyCheckpoints(null, null, "-1_1/4", FracCalc.produceAnswer("-3_3/4 + 2_2/4"));}
    @Test public void testCheckpoint3_AdditionImproperFractionsAndReductions2() {FracCalcTestALL.assertForEarlyCheckpoints(null, null, "1_1/20", FracCalc.produceAnswer("4/5 + 2/8"));}
    @Test public void testCheckpoint3_AdditionCombined4() { FracCalcTestALL.assertForEarlyCheckpoints(null, null, "62_11/19", FracCalc.produceAnswer("0 + 34_543/19"));}
    @Test public void testCheckpoint3_SubtractionSimple3() {FracCalcTestALL.assertForEarlyCheckpoints(null, null, "0", FracCalc.produceAnswer("4_1/2 - 4_1/2"));}
    @Test public void testCheckpoint3_SubtractionWithNegatives3() {FracCalcTestALL.assertForEarlyCheckpoints(null, null, "-1_1/4", FracCalc.produceAnswer("-3_3/4 - -2_2/4"));}
    @Test public void testCheckpoint3_SubtractionCombined2() {FracCalcTestALL.assertForEarlyCheckpoints(null, null, "8_5/21", FracCalc.produceAnswer("-12_3/7 - -20_2/3"));}
    @Test public void testCheckpoint3_MultiplicationBasic1() {  FracCalcTestALL.assertForEarlyCheckpoints(null, null, "3", FracCalc.produceAnswer("1_1/2 * 2"));}
    @Test public void testCheckpoint3_MultiplicationBasic10() {FracCalcTestALL.assertForEarlyCheckpoints(null, null, "378/943", FracCalc.produceAnswer("27/41 * 14/23"));}
    @Test public void testCheckpoint3_MultiplicationBasic3() {FracCalcTestALL.assertForEarlyCheckpoints(null, null, "164268", FracCalc.produceAnswer("234 * 702"));}
    @Test public void testCheckpoint3_MultiplicationWithNegatives2() {FracCalcTestALL.assertForEarlyCheckpoints(null, null, "-8", FracCalc.produceAnswer("-12/3 * 2/1"));}
    @Test public void testCheckpoint3_MultiplicationWithNegatives6() {FracCalcTestALL.assertForEarlyCheckpoints(null, null, "15_5/7", FracCalc.produceAnswer("-3_2/3 * -4_2/7"));}
    @Test public void testCheckpoint3_MultiplicationByZero2() {FracCalcTestALL.assertForEarlyCheckpoints(null, null, "0", FracCalc.produceAnswer("0 * 0"));}
    @Test public void testCheckpoint3_MultiplicationByZero3() {FracCalcTestALL.assertForEarlyCheckpoints(null, null, "0", FracCalc.produceAnswer("0 * 9321"));}
    @Test public void testCheckpoint3_MultiplicationByZero4() {FracCalcTestALL.assertForEarlyCheckpoints(null, null, "0", FracCalc.produceAnswer("0 * -5902"));}
    @Test public void testCheckpoint3_MultiplicationCombined1() {   FracCalcTestALL.assertForEarlyCheckpoints(null, null, "1065_115/168", FracCalc.produceAnswer("-32_75/16 * -27_43/21"));}
    @Test public void testCheckpoint3_MultiplicationCombined2() {FracCalcTestALL.assertForEarlyCheckpoints(null, null, "-15_67/943", FracCalc.produceAnswer("1_27/41 * -3_140/23"));}
    @Test public void testCheckpoint3_DivisionBasic1() {FracCalcTestALL.assertForEarlyCheckpoints(null, null, "9/16", FracCalc.produceAnswer("3/4 / 4/3"));}
    @Test public void testCheckpoint3_DivisionBasic2() {FracCalcTestALL.assertForEarlyCheckpoints(null, null, "2_1/4", FracCalc.produceAnswer("3/2 / 2/3"));}
    @Test public void testCheckpoint3_DivisionWithNegatives5() {FracCalcTestALL.assertForEarlyCheckpoints(null, null, "-2_6/7", FracCalc.produceAnswer("-20 / 7"));}
    @Test public void testCheckpoint3_DivisionWithNegatives6() {FracCalcTestALL.assertForEarlyCheckpoints(null, null, "1_13/32", FracCalc.produceAnswer("-3_3/4 / -2_2/3"));}
    @Test public void testCheckpoint3_DivisionWithZero5() { FracCalcTestALL.assertForEarlyCheckpoints(null, null, "0", FracCalc.produceAnswer("0 / 46/27"));}
    @Test public void testCheckpoint3_DivisionWithZero6() {FracCalcTestALL.assertForEarlyCheckpoints(null, null, "0", FracCalc.produceAnswer("0/24 / 1/46"));}
    @Test public void testCheckpoint3_DivisionCombined2() {FracCalcTestALL.assertForEarlyCheckpoints(null, null, "-2_2/3", FracCalc.produceAnswer("16/4 / -3/2"));}
    @Test public void testCheckpoint3_DivisionCombined3() {FracCalcTestALL.assertForEarlyCheckpoints(null, null, "6_661/5520", FracCalc.produceAnswer("-38_3/72 / -4_82/37"));}

    public static void main(String[] args){
    	
    	Scanner userInput = new Scanner(System.in);
    	System.out.println("Enter your operation.");
    	String expression = userInput.nextLine();
    	while (expression!=("quit")){
    		
    		String answer = produceAnswer(expression);
    		System.out.println(answer);
    		System.out.println("\nEnter your operation:");
    		expression = userInput.nextLine();
    	}
    	
    }
    
    public static String produceAnswer(String input){
    	String[] splitBySpaces = input.split(" ");
		String operator= splitBySpaces[1];
		int[] firstOperand= parseOperand(splitBySpaces[0]);
		int[] secondOperand= parseOperand(splitBySpaces[2]);
    	
    	String answer;
    

	
		if(operator.equals("+")){
			//addition
			answer = toMixedFrac(addFrac(firstOperand, secondOperand));
		}else if(operator.equals("-")){
			//subtraction
			answer =  toMixedFrac(subtractFrac(firstOperand, secondOperand));
		}else if(operator.equals("*")){
			//multiplication
			answer =  toMixedFrac(multiplyFrac(firstOperand, secondOperand));
		}else if(operator.equals("/")){
			//division
			answer =  toMixedFrac(divideFrac(firstOperand, secondOperand));
		}else{
			answer = "Please check your expression";
		}
		
	
	    return answer;
}

   
    
    //This method splits the operand into three parts: whole number, numerator and denominator
    public static int[] parseOperand(String operand){
		String[] partsOfOperand=new String [3];
		int underScore = operand.indexOf("_");
		int slash = operand.indexOf("/");
		if (underScore<0 && slash<0) {
			//integers
			partsOfOperand[0] = operand;//whole number
			partsOfOperand[1] = "0";//numerator
			partsOfOperand[2] = "1";//denominator
		}else if(underScore<0 && slash>0 ){
			//improper fraction
			partsOfOperand[0] = "0";
			partsOfOperand[1] = operand.substring(0, slash);
			partsOfOperand[2] = operand.substring(slash+1);
		}else if(underScore>0 && slash>0){
			//mixed fraction
			partsOfOperand[0] = operand.substring(0,underScore);
			partsOfOperand[1]=operand.substring(underScore+1,slash);
			partsOfOperand[2] = operand.substring(slash+1);
		}
		
		int[] finalOperand=new int [3];
		for(int i = 0; i < 3; i++){
			finalOperand[i]= Integer.parseInt(partsOfOperand[i]);
		}
		return finalOperand;

    }
    
    
    

	public static int[] toImproperFrac (int[] operands){
		int[] improperFrac=new int [2];
		if(operands[0]<0){
			//negative fraction
			 improperFrac[0] = (operands[0]*operands[2])+(operands[1]*-1);
			 improperFrac[1] = operands[2];
		}else{
			improperFrac[0] =((operands[0]*operands[2])+operands[1]);
			improperFrac[1]=operands[2];
		}
		return improperFrac;
	}
	
	public static String toMixedFrac(int[] pq){
		String answer;
		int GCF = Calculate.gcf(pq[0],pq[1]);
		if(GCF!=1){
			pq[0] = pq[0]/GCF;
			pq[1] = pq[1]/GCF;
		}
		if(pq[1]<0){
			pq[1]=Calculate.absValue(pq[1]);
			pq[0]=pq[0]*-1;
		}
		int coefficient = pq[0]/pq[1];
    	int remainder = pq[0] % pq[1];
    	if (coefficient<0){
    		if(remainder==0 && pq[1]==1){
				answer = (Integer.toString(coefficient));
    		}else if(remainder==0 && pq[1]==-1){
    			answer = (Integer.toString(coefficient));
    		}else{
    		 answer = (coefficient + "_" + Calculate.absValue(remainder) + "/" + Calculate.absValue(pq[1]));
    		}
    	}else if(pq[0]%pq[1]==0){
    		answer=(coefficient+"");
    		
		}else if(coefficient==0){
			
	    		if(remainder<0 && pq[1]<0){
	    			int newNum = remainder*-1;
	    			int newDenom = pq[1]*-1;
	    			answer=(newNum + "/" + newDenom);
	    		}else{
			answer = (remainder + "/" + pq[1]);
	    		}
		}else if(remainder<0 && pq[1]<0){
    	    	int newNum = remainder*-1;
    			int newDenom = pq[1]*-1;
    			answer=((coefficient + "_" + newNum) + "/" + newDenom);
		
		}else{
				answer = ((coefficient + "_" + remainder) + "/" + pq[1]);
				}
			
    		
    	return answer;
	}	
	
	public static int[] addFrac(int[] fisrtOperand, int[] secondOperand){
    	int[] answer = new int[2];
    	int numeratorOne = fisrtOperand[0];
    	int denominatorOne = fisrtOperand[1];
    	int numeratorTwo = secondOperand[0];
    	int denominatorTwo = secondOperand[1];
    	
    	answer[0] = numeratorOne*denominatorTwo+numeratorTwo*denominatorOne;
    	answer[1]	= denominatorOne*denominatorTwo;

    	
    	
    	return answer;
    	
    }
	
    public static int[] subtractFrac(int[] fisrtOperand, int[] secondOperand){
    	int[] answer = new int[2];
    	int numeratorOne = fisrtOperand[0];
    	int denominatorOne = fisrtOperand[1];
    	int numeratorTwo = secondOperand[0];
    	int denominatorTwo = secondOperand[1];
    	
    	answer[0] = numeratorOne*denominatorTwo-numeratorTwo*denominatorOne;
    	answer[1] =  denominatorOne*denominatorTwo;
    	
    	return answer;
    }
    
    public static int[] multiplyFrac(int[] fisrtOperand, int[] secondOperand){
    	int[] answer = new int[2];
    	int numeratorOne = fisrtOperand[0];
    	int denominatorOne = fisrtOperand[1];
    	int numeratorTwo = secondOperand[0];
    	int denominatorTwo = secondOperand[1];
        
    	answer[0] = numeratorOne*numeratorTwo;
    	answer[1] = denominatorOne*denominatorTwo;
        
        return answer;
    }
    
    public static int[] divideFrac(int[] fisrtOperand, int[] secondOperand){
    	int[] answer = new int[2];;
    	int numeratorOne = fisrtOperand[0];
    	int denominatorOne = fisrtOperand[1];
    	int numeratorTwo = secondOperand[0];
    	int denominatorTwo = secondOperand[1];
    	
    	answer[0] = numeratorOne*denominatorTwo;
    	answer[1] = numeratorTwo*denominatorOne;
    	
    	return answer;
    }
    
    
    
    

}
