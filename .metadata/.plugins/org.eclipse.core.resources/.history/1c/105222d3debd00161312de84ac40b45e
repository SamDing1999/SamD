
/**
 * 
 * @author Sam Ding
 * Date : 12/08/16
 * 
 * Goal : The objective of this assignment is to create a calculator to compute arithmetic operations 
 * between integers and/or fractions and output the result as a reduced mixed fraction.
 * 
 * 
 * 
*/
package fracCalc;
import java.util.Arrays;
import java.util.Scanner;


public class FracCalc {
	public static void main (String[] args){
		System.out.println("Please put in an expression");
		Scanner input  = new Scanner(System.in);
		String userInput = input.nextLine();
		while (userInput.equals("quit")!= true){
			String answer = produceAnswer(userInput);
			System.out.println(answer);
			System.out.println("please type next operation");
			userInput = input.nextLine();
		}
		System.out.println("Please press \"RUN\" to start over");
	}


	public static String produceAnswer(String Input){
		String[] splitBySpaces = Input.split(" ");
		String operator= splitBySpaces[1];
		int[] firstOperand= parseOperand(splitBySpaces[0]);//store the first  operand
		int[] secondOperand= parseOperand(splitBySpaces[2]);//store the second operand
		int[] improperOperand1=toImproperFrac(firstOperand);
		int[] improperOperand2=toImproperFrac(secondOperand);
		String answer;
		if ( operator.equals("+") ){
			answer = toMixedFrac(addFrac(improperOperand1,improperOperand2));
		}else if(operator.equals("-")){
			answer = toMixedFrac((subtractFrac(improperOperand1,improperOperand2)));
		}else if(operator.equals("*")){
			answer = toMixedFrac(multiplyFrac(improperOperand1,improperOperand2));
		}else if(operator.equals("/")){
			answer = toMixedFrac(divideFrac(improperOperand1,improperOperand2));	
		}else{
			answer = "Please check your expression";
		}

		return answer;
	}
	
	public static int[] parseOperand(String operand){
		String[] partsOfOperand=new String [3];
		if (operand.indexOf("_")<0 && operand.indexOf("/")<0) {
			//integers
			partsOfOperand[0] = operand;
			partsOfOperand[1] = "0";
			partsOfOperand[2] = "1";
		}else if(operand.indexOf("_")<0 && operand.indexOf("/")>0 ){
			//improper fraction
			partsOfOperand[0] = "0";
			partsOfOperand[1] = operand.substring(0, operand.indexOf("/"));
			partsOfOperand[2] = operand.substring(operand.indexOf("/")+1);
		}else if(operand.indexOf("_")>0 && operand.indexOf("/")>0){
			//Mixed fraction
			partsOfOperand[0] = operand.substring(0,operand.indexOf("_"));
			partsOfOperand[1]=operand.substring(operand.indexOf("_")+1,operand.indexOf("/"));
			partsOfOperand[2] = operand.substring(operand.indexOf("/")+1);
		}
			int[] parseOfOperand=new int [3];
			for(int i = 0; i < 3; i++){
				parseOfOperand[i]= Integer.parseInt(partsOfOperand[i]);
			}
		return parseOfOperand;
	}



	public static int[] toImproperFrac (int[] operands){
		int[] improperFrac=new int [2];
		if(operands[0]<0){
			improperFrac[0] = (operands[0]*operands[2])+(operands[1]*-1)	;
			improperFrac[1] = operands[2];
		}else{
			improperFrac[0] =((operands[0]*operands[2])+operands[1]);
			improperFrac[1]=operands[2];
		}
		return improperFrac;
	}
				
	public static String toMixedFrac(int[] pq){
		String answer;
		int GCF = gcf(pq[0],pq[1]);
		if(GCF!=1){
			pq[0] = pq[0]/GCF;
			pq[1] = pq[1]/GCF;
		}
		if(pq[1]<0){
				pq[1]=Calculate.absValue(pq[1]);
				pq[0]=pq[0]*-1;
		}
		int coefficient = pq[0]/pq[1];
	  	int remainder = pq[0] % pq[1];
	 	if (coefficient<0){
	  		if(remainder==0 && pq[1]==1){
				answer = (Integer.toString(coefficient));
	 		}else if(remainder==0 && pq[1]==-1){
	  			answer = (Integer.toString(coefficient));
	  		}else{
		  		 answer = (coefficient + "_" + Calculate.absValue(remainder) + "/" + Calculate.absValue(pq[1]));
			}
		}else if(pq[0]%pq[1]==0){
			answer=(coefficient+"");		
		}else if(coefficient==0){			
			if(remainder<0 && pq[1]<0){
				int newNum = remainder*-1;
		  		int newDenom = pq[1]*-1;
				answer=(newNum + "/" + newDenom);
			}else{
				answer = (remainder + "/" + pq[1]);
	  		}
		}else if(remainder<0 && pq[1]<0){
 	    	int newNum = remainder*-1;
 			int newDenom = pq[1]*-1;
			answer=((coefficient + "_" + newNum) + "/" + newDenom);
		}else{
			answer = ((coefficient + "_" + remainder) + "/" + pq[1]);
		}
					    		
	   	return answer;
	}	
	
	//A method that finds the greatest common factor of two integers
	/**
	 * @param integer
	 * @return integer
	 */
	public static int gcf(int a, int b){
		while(a!=0 && b!=0){
			int c = b;
			b = a%b;
			a = c;
		}
		return Calculate.absValue(a+b);
	}
				
	public static int[] addFrac(int[] firstOperand, int[] secondOperand){ 
		int[] answer =new int[2];
		int firstNumerator = firstOperand[0];
		int firstDenominator = firstOperand[1];
		int secondNumerator = secondOperand[0];
		int secondDenominator = secondOperand[1];
		answer[0] = secondDenominator * firstNumerator + firstDenominator * secondNumerator;
		answer[1] = firstDenominator * secondDenominator;
		return answer;
	}
	public static int[] subtractFrac(int[] firstOperand, int[] secondOperand){ 
		int[] answer =new int[2];
		int firstNumerator = firstOperand[0];
		int firstDenominator = firstOperand[1];
		int secondNumerator = secondOperand[0];
		int secondDenominator = secondOperand[1];
		answer[0] = secondDenominator * firstNumerator - firstDenominator * secondNumerator;
		answer[1] = firstDenominator * secondDenominator;
		return answer;
	}
	public static int[] multiplyFrac(int[] firstOperand, int[] secondOperand){ 
		int[] answer =new int[2];
		int firstNumerator = firstOperand[0];
		int firstDenominator = firstOperand[1];
		int secondNumerator = secondOperand[0];
		int secondDenominator = secondOperand[1];
		answer[0] = firstNumerator * secondNumerator;
		answer[1] = firstDenominator * secondDenominator;
		return answer;
	}
	public static int[] divideFrac(int[] firstOperand, int[] secondOperand){ 
		int[] answer =new int[2];
		int firstNumerator = firstOperand[0];
		int firstDenominator = firstOperand[1];
		int secondNumerator = secondOperand[0];
		int secondDenominator = secondOperand[1];
		answer[0] =firstNumerator * secondDenominator;
		answer[1] = firstDenominator * secondNumerator;
		return answer;
	}
}
